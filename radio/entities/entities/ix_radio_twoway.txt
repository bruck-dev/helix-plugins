
AddCSLuaFile()

local PLUGIN = PLUGIN

ENT.Type = "anim"
ENT.PrintName = "Radio (One Way)"
ENT.Description = "This radio can only receive messages and stations, it cannot be used to broadcast messages."
ENT.Category = "Helix - Radio"
ENT.Spawnable = true
ENT.AdminOnly = true
ENT.bNoPersist = true

ENT.Model = "models/props/cs_office/radio.mdl"
ENT.PhysicsSounds = true

ENT.EnableSound = "buttons/lever7.wav"                                      -- this is the sound played when the radio turns on, can be a single string or a list or strings
ENT.DisableSound = "buttons/lever7.wav"                                     -- ditto as above, but for when it is turned off
ENT.ReceiveSound = "buttons/blip1.wav"                                      -- ditto as above, but for when the radio receives a valid radio message

ENT.TwoWay = true                                                           -- if true, this radio can act as a broadcaster as well as a receiver
ENT.EnableStations = true                                                   -- if true, this radio can tune to radio stations and play music/audio
ENT.CanGarble = false                                                       -- if true, radio messages broadcasted from this radio can be garbled if the config is enabled based on distance to the receiver

-- standard american FM band
ENT.FrequencyBand = {
    ["min"] = 88.0,
    ["max"] = 108.0,
}

-- customize parameters depending on whether or not the radio is on. can be a sprite, a skin, etc.
if CLIENT then
    local material = Material("sprites/light_glow02_add")

    function ENT:DrawEnabled()
        local pos = self:GetPos() + (self:GetForward() * 3) + (self:GetUp() * 3.5) - (self:GetRight() * 3.5)
        render.SetMaterial(material)
        if self:GetEnabled() then
            render.DrawSprite(pos, 12, 12, Color(0, 255, 0, 75))
        else
            render.DrawSprite(pos, 12, 12, Color(255, 0, 0, 75))
        end
    end
end

-- EVERYTHING BELOW HERE SHOULD NOT BE CHANGED UNLESS YOU KNOW WHAT YOU ARE DOING --
do
    function ENT:SetupDataTables()
        self:NetworkVar("String", 0, "Frequency")
        self:NetworkVar("String", 1, "FrequencyUnit")
        self:NetworkVar("String", 2, "MinUnit")
        self:NetworkVar("String", 3, "MaxUnit")
        self:NetworkVar("Bool", 0, "Enabled")

        if SERVER then
            self:NetworkVarNotify("Enabled", self.OnVarChanged)
            self:NetworkVarNotify("Frequency", self.OnVarChanged)
        end
    end

    function ENT:OnVarChanged(var, old, new)
        if SERVER then

            if var == "Enabled" then
                if !new then
                    if self.EnableStations then
                        self:StopPlaying()
                    end

                    local snd = self:GetDisableSound()
                    if snd then
                        self:EmitSound(snd)
                    end
                else
                    local snd = self:GetEnableSound()
                    if snd then
                        self:EmitSound(snd)
                    end
                end
            elseif var == "Frequency" then
                if self.EnableStations then
                    if ix.radio.stations.Get(old) then
                        self:StopPlaying()
                    end

                    local newStation = ix.radio.stations.Get(new)
                    if newStation and !newStation.isStream then
                        self.station = newStation
                        self.startTime = ix.radio.stations.instances[newStation.uniqueID].startTime
                        self.path = ix.radio.stations.instances[newStation.uniqueID].track
                    end
                end

                local snd = self:GetReceiveSound()
                if snd then
                    self:EmitSound(snd)
                end
            end

        end
    end

    if (SERVER) then
        function ENT:Initialize()
            self:SetModel(self.Model)
            self:SetMoveType(MOVETYPE_VPHYSICS)
            self:SetSolid(SOLID_VPHYSICS)
            self:PhysicsInit(SOLID_VPHYSICS)

            self:SetFrequency(string.format("%.2f", 0))
            self:SetFrequencyUnit("MHz")

            local _, unit = self:ConvertUnit(self.FrequencyBand["min"])
            self:SetMinUnit(unit)
            local _, unit = self:ConvertUnit(self.FrequencyBand["max"])
            self:SetMaxUnit(unit)
            self:SetEnabled(false)

            self.listeners = {}

            local physObj = self:GetPhysicsObject()
            if (IsValid(physObj)) then
                physObj:EnableMotion(false)
                physObj:Sleep()
            end

            PLUGIN:SaveData()
        end

        function ENT:OnOptionSelected(client, option, data)
            local ent = self
        
            if option == "Enable" then
                self:SetEnabled(true)
            elseif option == "Disable" then
                self:SetEnabled(false)
            end
        
            if option == "Set Frequency" then
                local defaultFreq = tonumber(self:GetFrequency())
                if !defaultFreq or defaultFreq <= 0 then
                    defaultFreq = "100.0"
                end

                client:RequestString("Frequency (MHz)", "What would you like to set the frequency to?", function(frequency)
                    if tonumber(frequency) then
                        frequency = string.format("%.2f", tonumber(frequency))
                        client:Notify(ent:UpdateFrequency(frequency))
                    else
                        client:Notify(string.format("%s is an invalid frequency.", frequency))
                    end
                end, defaultFreq)
            end
        end

        function ENT:Think()
            if self.EnableStations and self:GetEnabled() then
                local station = self.station or ix.radio.stations.Get(self:GetFrequency())
                if station and station:CanPlay() then
                    self.station = station

                    if !self.startTime then
                        self.startTime = CurTime()
                    end

                    local listeners = {}
                    local radius = ix.config.Get("radioListenRange", 140) * 4

                    for _, v in ipairs(ents.FindInSphere(self:GetPos(), radius)) do
                        if v:IsPlayer() and v:Alive() then
                            listeners[v] = true

                            if !(self.listeners and self.listeners[v]) then
                                local path = self.path
                                if !path then
                                    if istable(station.trackList) then
                                        path = station.trackList[1]
                                    else
                                        path = station.trackList
                                    end

                                    self.path = path
                                end

                                net.Start("ixRadioStationJoin")
                                    net.WriteEntity(self)
                                    net.WriteString(path)
                                    net.WriteBool(!file.Exists("sound/" .. path, "GAME")) -- check if the path is a file or a remote url
                                    if station.isStream then
                                        net.WriteFloat(-1)
                                    else
                                        net.WriteFloat(CurTime() - self.startTime)
                                    end
                                net.Send(v)
                            end
                        end
                    end
                
                    for client, _ in pairs(self.listeners or {}) do
                        if !listeners[client] and IsValid(client) then
                            net.Start("ixRadioStationLeave")
                                net.WriteEntity(self)
                            net.Send(client)
                        end
                    end

                    self.listeners = listeners
                end
            end

            self:NextThink(CurTime() + 0.25)

            return true
        end

        function ENT:StopPlaying()
            for client, _ in pairs(self.listeners or {}) do
                if IsValid(client) then
                    net.Start("ixRadioStationLeave")
                        net.WriteEntity(self)
                    net.Send(client)
                end
            end

            self.startTime = nil
            self.station = nil
            self.path = nil
            self.listeners = {}
        end

        function ENT:OnRemove()
            self:StopPlaying()
        end
    else
        ENT.PopulateEntityInfo = true

        function ENT:OnPopulateEntityInfo(tooltip)
            local name = tooltip:AddRow("name")
            name:SetImportant()
            name:SetText(self.PrintName)
            name:SizeToContents()

            local description = tooltip:AddRow("description")
            local min, max, minUnit, maxUnit = self:GetValidFrequencyBand()
            local text = string.format("%s\n\nFrequency Band: %s %s to %s %s", self.Description, min, minUnit, max, maxUnit)
            if tonumber(self:GetFrequency()) > 0 and self:GetFrequencyUnit() then
                text = text .. string.format("\nFrequency Tuning: %s %s", self:GetFrequency(), self:GetFrequencyUnit())
            end
            description:SetText(text)
            description:SizeToContents()
        end

        function ENT:Draw()
            self:DrawModel()
            self:DrawEnabled()
        end

        function ENT:Think()
            if !self.clientAudioChannel or !self.clientAudioChannel:IsValid() then return end
            self.clientAudioChannel:SetPos(self:GetPos())
        end

        function ENT:OnRemove()
            if self.clientAudioChannel and self.clientAudioChannel:IsValid() then
                self.clientAudioChannel:Stop()
            end
        end
    end

    function ENT:GetEntityMenu(client)
        if !IsValid(client) and !(client:GetPos():DistToSqr(self:GetPos()) < 75 * 75) or !client:GetCharacter() then
            return
        end

        local options = {}

        if self:GetEnabled() then
            options["Disable"] = true
        else
            options["Enable"] = true
        end

        options["Set Frequency"] = true

        return options
    end

    function ENT:ConvertUnit(freq)
        if isstring(freq) then
            freq = tonumber(freq)
        end
        freq = tonumber(string.format("%.2f", freq))

        -- no need to convert if we're already in the MHz range
        if freq >= 1 and freq < 1000 then
            return string.format("%.2f", freq), "MHz"
        end

        freq = freq * 1000000000 -- normalize to GHz; we ALWAYS divide once, so this makes room for the first division
        local units = {
            "Hz",
            "kHz",
            "MHz",
            "GHz",
            "THz",
        }

        local i = 0
        while freq >= 1000 do
            freq = freq / 1000
            i = i + 1
        end

        return string.format("%.2f", freq), (units[i] or "undefined")
    end

    function ENT:GetValidFrequencyBand()
        return string.format("%.2f", self.FrequencyBand["min"]), string.format("%.2f", self.FrequencyBand["max"]), self:GetMinUnit(), self:GetMaxUnit() 
    end

    function ENT:UpdateFrequency(freq)
        local min, max, minUnit, maxUnit = self:GetValidFrequencyBand()
        local freq, unit = self:ConvertUnit(freq)

        local compareFreq = tonumber(freq)

        if compareFreq > tonumber(max) or compareFreq < tonumber(min) then
            return string.format("%s %s is outside of the device's operating frequency band of %s %s to %s %s.", freq, unit, min, minUnit, max, maxUnit)
        else
            self:SetFrequency(freq)
            self:SetFrequencyUnit(unit)
            return string.format("You have set this radio's frequency to %s %s.", freq, unit)
        end
    end

    function ENT:GetEnableSound()
        if self.EnableSound then
            if istable(self.EnableSound) then
                return self.EnableSound[math.random(1, #self.EnableSound)]
            else
                return self.EnableSound
            end
        end
    end

    function ENT:GetDisableSound()
        if self.DisableSound then
            if istable(self.DisableSound) then
                return self.DisableSound[math.random(1, #self.DisableSound)]
            else
                return self.DisableSound
            end
        end
    end

    function ENT:GetReceiveSound()
        if self.ReceiveSound then
            if istable(self.ReceiveSound) then
                return self.ReceiveSound[math.random(1, #self.ReceiveSound)]
            else
                return self.ReceiveSound
            end
        end
    end
end